Concurrent programming in Go

Golang concurrency model and some useful patterns

Federico Roasio - Mercadolibre

* Contents

- Go's philosofy on concurrency
- Building blocks 
- Patterns
- Real world examples
- Hands on

* Go's philosofy on concurrency

* Concurrency. Parallelism?

"Concurrency is the composition of independently executing processes, while parallelism is the simultaneous execution of (possibly related) computations"

: Concurrency is about dealing with lots of things at once. Parallelism is about doing lots of things at once. Dijkstra was a pioneer in the field arround 1965, one of the firsts dealing with concepts like mutual exclusion.

* Concurrency models in Go

- Shared memory multithreading
- Communicating Sequential Processes

"Share memory by communicating, don't communicate by sharing memory."

: CSP is a model of concurrency in which values are passed (using channels) between independent activities (goroutines) but variables are for the most part confined to a single activity

* So which should you use?

- Traditional primitives: Performance critical sections, guard internal state.
- Channels: Transfer ownership of data, coordinating multiple pieces of logic, distributing units of work.

: Use whichever is most expressive and/or most simple.

* Building blocks 

* Patterns

* Real world examples

* Hands on

